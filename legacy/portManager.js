export const PortManager = {
	init() {
		this.graph = null;
		this.paper = null;
		this.portStates = new Map(); // elementId -> {side: [{id, occupied, linkId}]}
		this.portCounter = 0;
		
		return this;
	},
	
	setGraph(graph) {
		this.graph = graph;
	},
	
	setPaper(paper) {
		this.paper = paper;
		
		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –ø–æ—Ä—Ç–∞–º —á–µ—Ä–µ–∑ JointJS —Å–æ–±—ã—Ç–∏—è
		this.paper.on('element:magnet:pointerclick', (elementView, evt, magnet) => {
			const portId = magnet.getAttribute('port');
			if (portId && this.graph) {
				const connections = this.graph.getLinks().filter(link => {
					const source = link.get('source');
					const target = link.get('target');
					return (source.port === portId) || (target.port === portId);
				}).length;
				console.log(`üîå Port: ${portId}, connections: ${connections}`);
			}
		});
	},
	
	// –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Ä—Ç–æ–≤ (–¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –ø–æ—Ä—Ç–æ–≤)
	createEmptyPorts() {
		return {
			groups: {
				'simplePorts': {
					attrs: { 
						circle: { 
							r: 4, 
							magnet: true, 
							stroke: '#31d0c6', 
							strokeWidth: 2, 
							fill: '#ffffff', 
							display: 'none',
							'pointer-events': 'auto'
						}
					},
					markup: '<circle r="4" />'
				}
			},
			items: []
		};
	},
	
	// –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–æ—Ä—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É)
	createSimplePorts() {
		return {
			groups: {
				'simplePorts': {
					attrs: { 
						circle: { 
							r: 4, 
							magnet: true, 
							stroke: '#31d0c6', 
							strokeWidth: 2, 
							fill: '#ffffff', 
							display: 'none',
							'pointer-events': 'auto'
						}
					},
					markup: '<circle r="4" />'
				}
			},
			items: [
				{ group: 'simplePorts', args: { x: '50%', y: '0%' }, id: 'top_0' },
				{ group: 'simplePorts', args: { x: '100%', y: '50%' }, id: 'right_0' },
				{ group: 'simplePorts', args: { x: '50%', y: '100%' }, id: 'bottom_0' },
				{ group: 'simplePorts', args: { x: '0%', y: '50%' }, id: 'left_0' }
			]
		};
	},
	
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
	initElementPorts(element) {
		const elementId = element.id;
		const existingPorts = element.getPorts();
		
		// –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ä—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		if (existingPorts.length === 0) {
			this.portStates.set(elementId, {
				top: [],
				right: [],
				bottom: [],
				left: []
			});
			return;
		}
		
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Ä—Ç–æ–≤
		const portState = {
			top: [],
			right: [],
			bottom: [],
			left: []
		};
		
		existingPorts.forEach(port => {
			const side = this.getPortSide(port.id);
			if (side) {
				portState[side].push({
					id: port.id,
					occupied: false,
					linkId: null
				});
			}
		});
		
		this.portStates.set(elementId, portState);
		this.updatePortVisuals(element);
	},
	
	// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–æ—Ä–æ–Ω—É –ø–æ—Ä—Ç–∞ –ø–æ –µ–≥–æ ID
	getPortSide(portId) {
		if (portId.startsWith('top_')) return 'top';
		if (portId.startsWith('right_')) return 'right';
		if (portId.startsWith('bottom_')) return 'bottom';
		if (portId.startsWith('left_')) return 'left';
		return null;
	},
	
	// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Ä—Ç –∫ —ç–ª–µ–º–µ–Ω—Ç—É
	addPortToElement(element, side) {
		const elementId = element.id;
		let portState = this.portStates.get(elementId);
		
		if (!portState) {
			this.initElementPorts(element);
			portState = this.portStates.get(elementId);
		}
		
		const sideCount = portState[side].length;
		const newPortId = `${side}_${sideCount}`;
		
		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—Ç –∫ —ç–ª–µ–º–µ–Ω—Ç—É
		const portArgs = this.calculatePortPosition(side, sideCount);
		element.addPort({
			group: 'simplePorts',
			args: portArgs,
			id: newPortId
		});
		
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		portState[side].push({
			id: newPortId,
			occupied: false,
			linkId: null
		});
		
		// –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–µ –ø–æ—Ä—Ç—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
		this.redistributePortsOnSide(element, side);
		
		this.updatePortVisuals(element);
		return newPortId;
	},
	
	// –£–¥–∞–ª—è–µ—Ç –ø–æ—Ä—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞
	removePortFromElement(element, portId) {
		const elementId = element.id;
		const portState = this.portStates.get(elementId);
		
		if (!portState) return false;
		
		// –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø–æ—Ä—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
		let removedPort = null;
		let portSide = null;
		
		for (const [side, ports] of Object.entries(portState)) {
			const portIndex = ports.findIndex(p => p.id === portId);
			if (portIndex !== -1) {
				removedPort = ports[portIndex];
				portSide = side;
				
				// –ï—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç, –æ—Ç–∫–ª—é—á–∞–µ–º –ª–∏–Ω–∏—é
				if (removedPort.occupied && removedPort.linkId) {
					const link = this.graph.getCell(removedPort.linkId);
					if (link) {
						link.remove();
					}
				}
				
				// –£–¥–∞–ª—è–µ–º –ø–æ—Ä—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
				ports.splice(portIndex, 1);
				break;
			}
		}
		
		if (!removedPort) return false;
		
		// –£–¥–∞–ª—è–µ–º –ø–æ—Ä—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞
		element.removePort(portId);
		
		// –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ—Ä—Ç—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
		this.redistributePortsOnSide(element, portSide);
		
		this.updatePortVisuals(element);
		return true;
	},
	
	// –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ—Ä—Ç—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞
	removeAllPorts(element) {
		const elementId = element.id;
		const portState = this.portStates.get(elementId);
		
		if (!portState) return false;
		
		// –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–∏–Ω–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ—Ä—Ç–∞–º–∏
		Object.values(portState).flat().forEach(port => {
			if (port.occupied && port.linkId) {
				const link = this.graph.getCell(port.linkId);
				if (link) {
					link.remove();
				}
			}
		});
		
		// –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Ä—Ç—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞
		const existingPorts = element.getPorts();
		existingPorts.forEach(port => {
			element.removePort(port.id);
		});
		
		// –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		this.portStates.set(elementId, {
			top: [],
			right: [],
			bottom: [],
			left: []
		});
		
		return true;
	},
	
	// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–∞
	getPortsOnSide(element, side) {
		const elementId = element.id;
		const portState = this.portStates.get(elementId);
		
		if (!portState || !portState[side]) return [];
		
		return portState[side];
	},
	
	// –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—Ç—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ
	redistributePortsOnSide(element, side) {
		const elementId = element.id;
		const portState = this.portStates.get(elementId);
		
		if (!portState || !portState[side]) return;
		
		const totalPorts = portState[side].length;
		
		if (totalPorts === 0) return;
		
		const step = 100 / (totalPorts + 1);
		
		portState[side].forEach((port, index) => {
			const position = step * (index + 1);
			let newArgs;
			
			switch (side) {
				case 'top':
					newArgs = { x: `${position}%`, y: '0%' };
					break;
				case 'right':
					newArgs = { x: '100%', y: `${position}%` };
					break;
				case 'bottom':
					newArgs = { x: `${position}%`, y: '100%' };
					break;
				case 'left':
					newArgs = { x: '0%', y: `${position}%` };
					break;
			}
			
			element.portProp(port.id, 'args', newArgs);
		});
	},
	
	// –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ—Ä—Ç–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ
	calculatePortPosition(side, index) {
		const totalPorts = index + 1;
		const step = 100 / (totalPorts + 1);
		const position = step * (index + 1);
		
		switch (side) {
			case 'top':
				return { x: `${position}%`, y: '0%' };
			case 'right':
				return { x: '100%', y: `${position}%` };
			case 'bottom':
				return { x: `${position}%`, y: '100%' };
			case 'left':
				return { x: '0%', y: `${position}%` };
		}
	},
	
	// –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ—Ä—Ç–æ–≤
	updatePortVisuals(element) {
		const elementId = element.id;
		const portState = this.portStates.get(elementId);
		
		if (!portState) return;
		
		Object.values(portState).flat().forEach(port => {
			if (port.occupied) {
				// –ó–∞–Ω—è—Ç—ã–π –ø–æ—Ä—Ç - –∫—Ä–∞—Å–Ω—ã–π —Å —Ç–æ–ª—Å—Ç–æ–π –æ–±–≤–æ–¥–∫–æ–π
				element.portProp(port.id, 'attrs/circle/stroke', '#ff4444');
				element.portProp(port.id, 'attrs/circle/strokeWidth', 3);
				element.portProp(port.id, 'attrs/circle/fill', '#ffcccc');
			} else {
				// –°–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
				element.portProp(port.id, 'attrs/circle/stroke', '#31d0c6');
				element.portProp(port.id, 'attrs/circle/strokeWidth', 2);
				element.portProp(port.id, 'attrs/circle/fill', '#ffffff');
			}
			// –ù–ï —Ç—Ä–æ–≥–∞–µ–º pointer-events - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
		});
	},
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
	showElementPorts(element) {
		if (!element) return;
		
		const elementId = element.id;
		if (!this.portStates.has(elementId)) {
			this.initElementPorts(element);
		}
		
		const portState = this.portStates.get(elementId);
		Object.values(portState).flat().forEach(port => {
			element.portProp(port.id, 'attrs/circle/display', 'block');
		});
		
		this.updatePortVisuals(element);
	},
	
	// –°–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
	hideElementPorts(element) {
		if (!element) return;
		
		const elementId = element.id;
		const portState = this.portStates.get(elementId);
		
		if (!portState) return;
		
		Object.values(portState).flat().forEach(port => {
			element.portProp(port.id, 'attrs/circle/display', 'none');
		});
	},
	
	// –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
	getFreePorts(element) {
		const elementId = element.id;
		const portState = this.portStates.get(elementId);
		
		if (!portState) return [];
		
		return Object.values(portState).flat().filter(port => !port.occupied);
	},
	
	// –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
	getFreePortsOnSide(element, side) {
		const elementId = element.id;
		const portState = this.portStates.get(elementId);
		
		if (!portState || !portState[side]) return [];
		
		return portState[side].filter(port => !port.occupied);
	},
	
	// –£–ü–†–û–©–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
	isPortAvailable(element, portId) {
		const elementId = element.id;
		const portState = this.portStates.get(elementId);
		
		if (!portState) return false;
		
		const port = Object.values(portState).flat().find(p => p.id === portId);
		return port && !port.occupied;
	},
	
	// –ó–∞–Ω–∏–º–∞–µ—Ç –ø–æ—Ä—Ç
	occupyPort(element, portId, linkId) {
		const elementId = element.id;
		const portState = this.portStates.get(elementId);
		
		if (!portState) return false;
		
		const port = Object.values(portState).flat().find(p => p.id === portId);
		if (!port) return false;
		
		port.occupied = true;
		port.linkId = linkId;
		
		this.updatePortVisuals(element);
		return true;
	},
	
	// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –ø–æ—Ä—Ç
	freePort(element, portId) {
		const elementId = element.id;
		const portState = this.portStates.get(elementId);
		
		if (!portState) return false;
		
		const port = Object.values(portState).flat().find(p => p.id === portId);
		if (!port) return false;
		
		port.occupied = false;
		port.linkId = null;
		
		this.updatePortVisuals(element);
		return true;
	},
	
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ª–∏–Ω–∏–∏
	onLinkConnect(link) {
		const sourceElement = link.getSourceElement();
		const targetElement = link.getTargetElement();
		const sourcePort = link.get('source').port;
		const targetPort = link.get('target').port;
		
		if (sourceElement && sourcePort) {
			this.occupyPort(sourceElement, sourcePort, link.id);
		}
		
		if (targetElement && targetPort) {
			this.occupyPort(targetElement, targetPort, link.id);
		}
	},
	
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ª–∏–Ω–∏–∏
	onLinkDisconnect(link) {
		const sourceElement = link.getSourceElement();
		const targetElement = link.getTargetElement();
		const sourcePort = link.get('source').port;
		const targetPort = link.get('target').port;
		
		if (sourceElement && sourcePort) {
			this.freePort(sourceElement, sourcePort);
		}
		
		if (targetElement && targetPort) {
			this.freePort(targetElement, targetPort);
		}
	},
	
	// –£–ü–†–û–©–ï–ù–ù–ê–Ø –≤–∞–ª–∏–¥–∞—Ü–∏—è: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¢–û–õ–¨–ö–û –∫ —Å–≤–æ–±–æ–¥–Ω—ã–º –ø–æ—Ä—Ç–∞–º
	validateConnection(cellViewS, magnetS, cellViewT, magnetT, end, linkView) {
		// –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –æ–¥–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
		if (cellViewS === cellViewT) return false;
		
		// –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¢–û–õ–¨–ö–û –∫ –ø–æ—Ä—Ç–∞–º
		if (!magnetS || !magnetT) return false;
		
		const sourcePortId = magnetS.getAttribute('port');
		const targetPortId = magnetT.getAttribute('port');
		
		if (!sourcePortId || !targetPortId) return false;
		
		// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
		const sourceAvailable = this.isPortAvailable(cellViewS.model, sourcePortId);
		const targetAvailable = this.isPortAvailable(cellViewT.model, targetPortId);
		
		return sourceAvailable && targetAvailable;
	},
	
	// –°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
	createConnectionBetween(sourceElement, targetElement) {
		const sourceFreePorts = this.getFreePorts(sourceElement);
		const targetFreePorts = this.getFreePorts(targetElement);
		
		if (sourceFreePorts.length === 0 || targetFreePorts.length === 0) {
			return null;
		}
		
		const sourcePort = sourceFreePorts[0];
		const targetPort = targetFreePorts[0];
		
		const link = new joint.shapes.standard.Link({
			source: { id: sourceElement.id, port: sourcePort.id },
			target: { id: targetElement.id, port: targetPort.id },
			attrs: {
				line: {
					stroke: '#8a8a96',
					strokeWidth: 2,
					targetMarker: { type: 'none' }
				}
			},
			router: { name: 'manhattan' },
			connector: { name: 'rounded' }
		});
		
		link.addTo(this.graph);
		return link;
	},
	
	// –°–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	createMultipleConnections(sourceElement, targetElement, sourcePort, targetPort, lineCount) {
		const createdLinks = [];
		
		for (let i = 0; i < lineCount; i++) {
			const link = new joint.shapes.standard.Link({
				source: { id: sourceElement.id, port: sourcePort },
				target: { id: targetElement.id, port: targetPort },
				attrs: {
					line: {
						stroke: '#8a8a96',
						strokeWidth: 2,
						targetMarker: { type: 'none' }
					}
				},
				router: { name: 'manhattan' },
				connector: { name: 'rounded' },
				// –î–æ–±–∞–≤–ª—è–µ–º offset –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
				vertices: i > 0 ? [{ x: 0, y: i * 5 }] : []
			});
			
			link.addTo(this.graph);
			createdLinks.push(link);
		}
		
		// –ü–æ–º–µ—á–∞–µ–º –ø–æ—Ä—Ç—ã –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–µ–π
		if (createdLinks.length > 0) {
			this.onLinkConnect(createdLinks[0]);
		}
		
		return createdLinks;
	},
	
	// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
	onElementRemove(element) {
		this.portStates.delete(element.id);
	},
	
	// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
	syncPortStates() {
		this.portStates.clear();
		
		this.graph.getElements().forEach(element => {
			this.initElementPorts(element);
		});
		
		this.graph.getLinks().forEach(link => {
			this.onLinkConnect(link);
		});
	}
};